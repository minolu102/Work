# purchasing/models.py
from django.db import models
from django.contrib.auth.models import User
from django.core.validators import MinValueValidator
from decimal import Decimal
from core.models import BaseModel, Company, Sequence
from inventory.models import Product, Warehouse
from accounting.models import Tax, ChartOfAccount

class Supplier(BaseModel):
    """ผู้จำหน่าย/คู่ค้า"""
    SUPPLIER_TYPES = [
        ('individual', 'Individual'),
        ('company', 'Company'),
    ]
    
    company = models.ForeignKey(Company, on_delete=models.CASCADE)
    code = models.CharField(max_length=50)
    name = models.CharField(max_length=255)
    supplier_type = models.CharField(max_length=20, choices=SUPPLIER_TYPES, default='company')
    
    # Contact information
    email = models.EmailField(null=True, blank=True)
    phone = models.CharField(max_length=20, null=True, blank=True)
    mobile = models.CharField(max_length=20, null=True, blank=True)
    website = models.URLField(null=True, blank=True)
    
    # Business information
    tax_id = models.CharField(max_length=20, null=True, blank=True)
    registration_number = models.CharField(max_length=50, null=True, blank=True)
    
    # Financial settings
    credit_limit = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    payment_terms = models.IntegerField(default=30, help_text="Payment terms in days")
    discount_percent = models.DecimalField(max_digits=5, decimal_places=2, default=0)
    
    # Account settings
    payable_account = models.ForeignKey(ChartOfAccount, on_delete=models.PROTECT, null=True, blank=True)
    purchase_representative = models.ForeignKey(User, on_delete=models.PROTECT, null=True, blank=True)
    
    # Rating and performance
    quality_rating = models.IntegerField(default=5, choices=[(i, i) for i in range(1, 6)])
    delivery_rating = models.IntegerField(default=5, choices=[(i, i) for i in range(1, 6)])
    service_rating = models.IntegerField(default=5, choices=[(i, i) for i in range(1, 6)])
    
    # Status
    is_approved = models.BooleanField(default=False)
    is_blocked = models.BooleanField(default=False)
    block_reason = models.CharField(max_length=255, null=True, blank=True)
    
    class Meta:
        unique_together = ['company', 'code']
        ordering = ['code']
        
    def __str__(self):
        return f"{self.code} - {self.name}"
    
    def get_outstanding_balance(self):
        """ยอดค้างจ่าย"""
        from django.db.models import Sum
        bills = self.purchase_bills.filter(
            status__in=['confirmed', 'partial_paid']
        )
        return bills.aggregate(
            total=Sum('outstanding_amount')
        )['total'] or 0
    
    def get_average_rating(self):
        """คะแนนเฉลี่ย"""
        return (self.quality_rating + self.delivery_rating + self.service_rating) / 3

class PurchaseOrder(BaseModel):
    """ใบสั่งซื้อ"""
    STATUS_CHOICES = [
        ('draft', 'Draft'),
        ('sent', 'Sent to Supplier'),
        ('confirmed', 'Confirmed'),
        ('received', 'Received'),
        ('billed', 'Billed'),
        ('cancelled', 'Cancelled'),
    ]
    
    PRIORITY_CHOICES = [
        ('low', 'Low'),
        ('normal', 'Normal'),
        ('high', 'High'),
        ('urgent', 'Urgent'),
    ]
    
    company = models.ForeignKey(Company, on_delete=models.CASCADE)
    po_number = models.CharField(max_length=50, unique=True)
    supplier = models.ForeignKey(Supplier, on_delete=models.CASCADE, related_name='purchase_orders')
    
    # Dates
    order_date = models.DateField()
    expected_delivery_date = models.DateField(null=True, blank=True)
    
    # Order details
    reference = models.CharField(max_length=100, null=True, blank=True)
    supplier_reference = models.CharField(max_length=100, null=True, blank=True)
    notes = models.TextField(null=True, blank=True)
    priority = models.CharField(max_length=10, choices=PRIORITY_CHOICES, default='normal')
    
    # Financial
    subtotal = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    discount_amount = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    tax_amount = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    total_amount = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    
    # Status
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='draft')
    purchase_representative = models.ForeignKey(User, on_delete=models.PROTECT)
    
    # Delivery
    warehouse = models.ForeignKey(Warehouse, on_delete=models.PROTECT)
    delivery_address = models.TextField(null=True, blank=True)
    
    # Approval workflow
    requires_approval = models.BooleanField(default=False)
    approved_by = models.ForeignKey(User, on_delete=models.PROTECT, null=True, blank=True, related_name='approved_pos')
    approved_date = models.DateTimeField(null=True, blank=True)
    
    class Meta:
        ordering = ['-order_date', '-po_number']
        
    def __str__(self):
        return f"{self.po_number} - {self.supplier.name}"
    
    def calculate_totals(self):
        """คำนวณยอดรวม"""
        lines = self.po_lines.all()
        
        self.subtotal = sum(line.line_total for line in lines)
        self.discount_amount = self.subtotal * (self.supplier.discount_percent / 100)
        
        # Calculate tax
        self.tax_amount = 0
        for line in lines:
            if line.tax:
                tax_calc = line.tax.calculate_tax(line.line_total)
                self.tax_amount += tax_calc['tax_amount']
        
        self.total_amount = self.subtotal - self.discount_amount + self.tax_amount
        self.save(update_fields=['subtotal', 'discount_amount', 'tax_amount', 'total_amount'])
    
    def can_be_received(self):
        """ตรวจสอบว่าสามารถรับสินค้าได้หรือไม่"""
        return self.status in ['confirmed', 'received']

class PurchaseOrderLine(BaseModel):
    """รายการในใบสั่งซื้อ"""
    po = models.ForeignKey(PurchaseOrder, on_delete=models.CASCADE, related_name='po_lines')
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    
    description = models.CharField(max_length=255, null=True, blank=True)
    quantity = models.DecimalField(max_digits=15, decimal_places=4, validators=[MinValueValidator(0)])
    unit_price = models.DecimalField(max_digits=15, decimal_places=2, validators=[MinValueValidator(0)])
    line_total = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    
    discount_percent = models.DecimalField(max_digits=5, decimal_places=2, default=0)
    discount_amount = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    
    tax = models.ForeignKey(Tax, on_delete=models.PROTECT, null=True, blank=True)
    
    # Delivery tracking
    received_quantity = models.DecimalField(max_digits=15, decimal_places=4, default=0)
    billed_quantity = models.DecimalField(max_digits=15, decimal_places=4, default=0)
    
    # Expected delivery
    expected_delivery_date = models.DateField(null=True, blank=True)
    
    class Meta:
        ordering = ['id']
        
    def save(self, *args, **kwargs):
        # Calculate line total
        if self.discount_percent > 0:
            self.discount_amount = self.quantity * self.unit_price * (self.discount_percent / 100)
        
        self.line_total = (self.quantity * self.unit_price) - self.discount_amount
        super().save(*args, **kwargs)
        
        # Update PO totals
        self.po.calculate_totals()
    
    def get_pending_quantity(self):
        """จำนวนที่ยังไม่ได้รับ"""
        return self.quantity - self.received_quantity
    
    def __str__(self):
        return f"{self.product.code} x {self.quantity}"

class PurchaseReceipt(BaseModel):
    """ใบรับสินค้า"""
    STATUS_CHOICES = [
        ('draft', 'Draft'),
        ('confirmed', 'Confirmed'),
        ('billed', 'Billed'),
        ('returned', 'Returned'),
        ('cancelled', 'Cancelled'),
    ]
    
    company = models.ForeignKey(Company, on_delete=models.CASCADE)
    receipt_number = models.CharField(max_length=50, unique=True)
    purchase_order = models.ForeignKey(PurchaseOrder, on_delete=models.CASCADE, related_name='receipts')
    supplier = models.ForeignKey(Supplier, on_delete=models.CASCADE)
    
    # Dates
    receipt_date = models.DateField()
    delivery_date = models.DateField(null=True, blank=True)
    
    # Receipt details
    supplier_delivery_note = models.CharField(max_length=100, null=True, blank=True)
    supplier_invoice_number = models.CharField(max_length=100, null=True, blank=True)
    notes = models.TextField(null=True, blank=True)
    
    # Transportation
    vehicle_number = models.CharField(max_length=50, null=True, blank=True)
    driver_name = models.CharField(max_length=255, null=True, blank=True)
    driver_phone = models.CharField(max_length=20, null=True, blank=True)
    
    # Status
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='draft')
    
    # Quality control
    qc_required = models.BooleanField(default=False)
    qc_status = models.CharField(max_length=20, choices=[
        ('pending', 'Pending'),
        ('passed', 'Passed'),
        ('failed', 'Failed'),
        ('partial', 'Partial'),
    ], null=True, blank=True)
    qc_notes = models.TextField(null=True, blank=True)
    qc_by = models.ForeignKey(User, on_delete=models.PROTECT, null=True, blank=True, related_name='qc_receipts')
    qc_date = models.DateTimeField(null=True, blank=True)
    
    # Approval
    received_by = models.ForeignKey(User, on_delete=models.PROTECT, related_name='received_orders')
    
    class Meta:
        ordering = ['-receipt_date', '-receipt_number']
        
    def __str__(self):
        return f"{self.receipt_number} - {self.supplier.name}"

class PurchaseReceiptLine(BaseModel):
    """รายการในใบรับสินค้า"""
    receipt = models.ForeignKey(PurchaseReceipt, on_delete=models.CASCADE, related_name='receipt_lines')
    po_line = models.ForeignKey(PurchaseOrderLine, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    
    quantity_ordered = models.DecimalField(max_digits=15, decimal_places=4)
    quantity_received = models.DecimalField(max_digits=15, decimal_places=4)
    quantity_rejected = models.DecimalField(max_digits=15, decimal_places=4, default=0)
    
    # Location tracking
    destination_location = models.ForeignKey('inventory.Location', on_delete=models.PROTECT)
    
    # Quality control
    qc_status = models.CharField(max_length=20, choices=[
        ('pending', 'Pending'),
        ('passed', 'Passed'),
        ('failed', 'Failed'),
    ], default='pending')
    rejection_reason = models.CharField(max_length=255, null=True, blank=True)
    
    notes = models.CharField(max_length=255, null=True, blank=True)
    
    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        
        # Update PO line received quantity
        self.po_line.received_quantity = sum(
            line.quantity_received for line in self.po_line.purchasereceiptline_set.all()
        )
        self.po_line.save()
    
    def __str__(self):
        return f"{self.product.code} - Received: {self.quantity_received}"

class PurchaseBill(BaseModel):
    """ใบเสนอซื้อ/บิล"""
    STATUS_CHOICES = [
        ('draft', 'Draft'),
        ('confirmed', 'Confirmed'),
        ('paid', 'Paid'),
        ('partial_paid', 'Partially Paid'),
        ('overdue', 'Overdue'),
        ('cancelled', 'Cancelled'),
    ]
    
    company = models.ForeignKey(Company, on_delete=models.CASCADE)
    bill_number = models.CharField(max_length=50, unique=True)
    supplier = models.ForeignKey(Supplier, on_delete=models.CASCADE, related_name='purchase_bills')
    purchase_order = models.ForeignKey(PurchaseOrder, on_delete=models.CASCADE, related_name='bills', null=True, blank=True)
    
    # Dates
    bill_date = models.DateField()
    due_date = models.DateField()
    
    # Bill details
    supplier_invoice_number = models.CharField(max_length=100)
    reference = models.CharField(max_length=100, null=True, blank=True)
    payment_terms = models.CharField(max_length=255, null=True, blank=True)
    
    # Financial amounts
    subtotal = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    discount_amount = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    tax_amount = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    total_amount = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    paid_amount = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    outstanding_amount = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    
    # Status
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='draft')
    
    # Accounting
    journal_entry = models.ForeignKey('accounting.JournalEntry', on_delete=models.PROTECT, null=True, blank=True)
    
    class Meta:
        ordering = ['-bill_date', '-bill_number']
        unique_together = ['company', 'supplier_invoice_number', 'supplier']
        
    def __str__(self):
        return f"{self.bill_number} - {self.supplier.name}"
    
    def calculate_totals(self):
        """คำนวณยอดรวมบิล"""
        lines = self.bill_lines.all()
        
        self.subtotal = sum(line.line_total for line in lines)
        
        # Calculate tax
        self.tax_amount = 0
        for line in lines:
            if line.tax:
                tax_calc = line.tax.calculate_tax(line.line_total)
                self.tax_amount += tax_calc['tax_amount']
        
        self.total_amount = self.subtotal - self.discount_amount + self.tax_amount
        self.outstanding_amount = self.total_amount - self.paid_amount
        
        # Update status based on payment
        if self.paid_amount == 0:
            if self.due_date < timezone.now().date():
                self.status = 'overdue'
            elif self.status not in ['draft']:
                self.status = 'confirmed'
        elif self.paid_amount >= self.total_amount:
            self.status = 'paid'
        else:
            self.status = 'partial_paid'
        
        self.save(update_fields=[
            'subtotal', 'tax_amount', 'total_amount', 'outstanding_amount', 'status'
        ])

class PurchaseBillLine(BaseModel):
    """รายการในบิล"""
    bill = models.ForeignKey(PurchaseBill, on_delete=models.CASCADE, related_name='bill_lines')
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    po_line = models.ForeignKey(PurchaseOrderLine, on_delete=models.CASCADE, null=True, blank=True)
    
    description = models.CharField(max_length=255)
    quantity = models.DecimalField(max_digits=15, decimal_places=4, validators=[MinValueValidator(0)])
    unit_price = models.DecimalField(max_digits=15, decimal_places=2, validators=[MinValueValidator(0)])
    line_total = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    
    discount_percent = models.DecimalField(max_digits=5, decimal_places=2, default=0)
    discount_amount = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    
    tax = models.ForeignKey(Tax, on_delete=models.PROTECT, null=True, blank=True)
    
    # Expense account
    expense_account = models.ForeignKey(ChartOfAccount, on_delete=models.PROTECT, null=True, blank=True)
    
    def save(self, *args, **kwargs):
        # Calculate line total
        if self.discount_percent > 0:
            self.discount_amount = self.quantity * self.unit_price * (self.discount_percent / 100)
        
        self.line_total = (self.quantity * self.unit_price) - self.discount_amount
        super().save(*args, **kwargs)
        
        # Update bill totals
        self.bill.calculate_totals()
    
    def __str__(self):
        return f"{self.product.code} x {self.quantity}"

class PurchasePayment(BaseModel):
    """การจ่ายชำระเงิน"""
    PAYMENT_METHODS = [
        ('cash', 'Cash'),
        ('bank_transfer', 'Bank Transfer'),
        ('cheque', 'Cheque'),
        ('credit_card', 'Credit Card'),
        ('mobile_banking', 'Mobile Banking'),
        ('e_wallet', 'E-Wallet'),
    ]
    
    company = models.ForeignKey(Company, on_delete=models.CASCADE)
    payment_number = models.CharField(max_length=50, unique=True)
    supplier = models.ForeignKey(Supplier, on_delete=models.CASCADE, related_name='payments')
    
    # Payment details
    payment_date = models.DateField()
    payment_method = models.CharField(max_length=20, choices=PAYMENT_METHODS)
    amount = models.DecimalField(max_digits=15, decimal_places=2, validators=[MinValueValidator(0)])
    reference = models.CharField(max_length=100, null=True, blank=True)
    
    # Bank details
    bank_account = models.ForeignKey(ChartOfAccount, on_delete=models.PROTECT, null=True, blank=True)
    cheque_number = models.CharField(max_length=50, null=True, blank=True)
    cheque_date = models.DateField(null=True, blank=True)
    
    # Status
    status = models.CharField(max_length=20, choices=[
        ('draft', 'Draft'),
        ('confirmed', 'Confirmed'),
        ('reconciled', 'Reconciled'),
        ('bounced', 'Bounced'),
    ], default='draft')
    
    notes = models.TextField(null=True, blank=True)
    
    # Accounting
    journal_entry = models.ForeignKey('accounting.JournalEntry', on_delete=models.PROTECT, null=True, blank=True)
    
    class Meta:
        ordering = ['-payment_date', '-payment_number']
        
    def __str__(self):
        return f"{self.payment_number} - {self.supplier.name} - {self.amount:,.2f}"

class PurchasePaymentAllocation(BaseModel):
    """การจัดสรรเงินจ่าย"""
    payment = models.ForeignKey(PurchasePayment, on_delete=models.CASCADE, related_name='allocations')
    bill = models.ForeignKey(PurchaseBill, on_delete=models.CASCADE, related_name='payment_allocations')
    amount = models.DecimalField(max_digits=15, decimal_places=2, validators=[MinValueValidator(0)])
    
    class Meta:
        unique_together = ['payment', 'bill']
        
    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        
        # Update bill paid amount
        total_allocated = self.bill.payment_allocations.aggregate(
            total=models.Sum('amount'))['total'] or 0
        self.bill.paid_amount = total_allocated
        self.bill.calculate_totals()
    
    def __str__(self):
        return f"{self.payment.payment_number} -> {self.bill.bill_number}: {self.amount:,.2f}"

class SupplierEvaluation(BaseModel):
    """การประเมินผู้จำหน่าย"""
    supplier = models.ForeignKey(Supplier, on_delete=models.CASCADE, related_name='evaluations')
    evaluation_period_start = models.DateField()
    evaluation_period_end = models.DateField()
    
    # Rating criteria (1-5 scale)
    quality_rating = models.IntegerField(choices=[(i, i) for i in range(1, 6)])
    delivery_rating = models.IntegerField(choices=[(i, i) for i in range(1, 6)])
    service_rating = models.IntegerField(choices=[(i, i) for i in range(1, 6)])
    pricing_rating = models.IntegerField(choices=[(i, i) for i in range(1, 6)])
    communication_rating = models.IntegerField(choices=[(i, i) for i in range(1, 6)])
    
    # Performance metrics
    on_time_delivery_rate = models.DecimalField(max_digits=5, decimal_places=2, default=0)
    quality_defect_rate = models.DecimalField(max_digits=5, decimal_places=2, default=0)
    response_time_hours = models.DecimalField(max_digits=8, decimal_places=2, default=0)
    
    # Comments
    strengths = models.TextField(null=True, blank=True)
    weaknesses = models.TextField(null=True, blank=True)
    recommendations = models.TextField(null=True, blank=True)
    
    # Overall assessment
    overall_rating = models.DecimalField(max_digits=3, decimal_places=2, default=0)
    continue_partnership = models.BooleanField(default=True)
    
    evaluated_by = models.ForeignKey(User, on_delete=models.PROTECT)
    
    def save(self, *args, **kwargs):
        # Calculate overall rating
        self.overall_rating = (
            self.quality_rating + self.delivery_rating + self.service_rating +
            self.pricing_rating + self.communication_rating
        ) / 5
        super().save(*args, **kwargs)
        
        # Update supplier ratings
        self.supplier.quality_rating = self.quality_rating
        self.supplier.delivery_rating = self.delivery_rating
        self.supplier.service_rating = self.service_rating
        self.supplier.save()
    
    def __str__(self):
        return f"{self.supplier.name} - {self.evaluation_period_start} to {self.evaluation_period_end}"

# purchasing/views.py
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse
from django.db.models import Sum, Q, F, Avg, Count
from django.utils import timezone
from django.core.paginator import Paginator
from .models import Supplier, PurchaseOrder, PurchaseBill, PurchasePayment
from .forms import SupplierForm, PurchaseOrderForm, PurchaseBillForm
from inventory.models import Product

@login_required
def supplier_list(request):
    """รายการผู้จำหน่าย"""
    suppliers = Supplier.objects.filter(
        company=request.user.profile.company,
        is_active=True
    ).order_by('code')
    
    # Search
    search = request.GET.get('search', '')
    if search:
        suppliers = suppliers.filter(
            Q(code__icontains=search) |
            Q(name__icontains=search) |
            Q(email__icontains=search) |
            Q(phone__icontains=search)
        )
    
    # Filter by approval status
    approved_only = request.GET.get('approved', '')
    if approved_only:
        suppliers = suppliers.filter(is_approved=True)
    
    # Pagination
    paginator = Paginator(suppliers, 20)
    page = request.GET.get('page')
    suppliers = paginator.get_page(page)
    
    context = {
        'suppliers': suppliers,
        'search': search,
        'approved_only': approved_only,
        'title': 'Supplier List - รายการผู้จำหน่าย'
    }
    return render(request, 'purchasing/supplier_list.html', context)

@login_required
def purchase_order_list(request):
    """รายการใบสั่งซื้อ"""
    orders = PurchaseOrder.objects.filter(
        company=request.user.profile.company
    ).select_related('supplier', 'purchase_representative').order_by('-order_date')
    
    # Filter by status
    status = request.GET.get('status', '')
    if status:
        orders = orders.filter(status=status)
    
    # Filter by priority
    priority = request.GET.get('priority', '')
    if priority:
        orders = orders.filter(priority=priority)
    
    # Filter pending approval
    pending_approval = request.GET.get('pending_approval', '')
    if pending_approval:
        orders = orders.filter(requires_approval=True, approved_by__isnull=True)
    
    # Pagination
    paginator = Paginator(orders, 20)
    page = request.GET.get('page')
    orders = paginator.get_page(page)
    
    context = {
        'orders': orders,
        'status': status,
        'priority': priority,
        'pending_approval': pending_approval,
        'title': 'Purchase Orders - ใบสั่งซื้อ'
    }
    return render(request, 'purchasing/purchase_order_list.html', context)

@login_required
def create_purchase_order(request):
    """สร้างใบสั่งซื้อใหม่"""
    if request.method == 'POST':
        form = PurchaseOrderForm(request.POST)
        if form.is_valid():
            order = form.save(commit=False)
            order.company = request.user.profile.company
            order.purchase_representative = request.user
            order.created_by = request.user
            
            # Generate PO number
            sequence = Sequence.objects.get_or_create(
                sequence_type='purchase_order',
                defaults={'prefix': 'PO', 'current_number': 0}
            )[0]
            order.po_number = sequence.get_next_number()
            
            # Check if requires approval (based on amount threshold)
            if order.total_amount > 100000:  # 100,000 THB threshold
                order.requires_approval = True
            
            order.save()
            
            messages.success(request, 'Purchase order created successfully.')
            return redirect('purchasing:purchase_order_detail', order_id=order.id)
    else:
        form = PurchaseOrderForm()
        form.fields['supplier'].queryset = Supplier.objects.filter(
            company=request.user.profile.company,
            is_active=True,
            is_approved=True
        )
    
    context = {
        'form': form,
        'title': 'Create Purchase Order'
    }
    return render(request, 'purchasing/purchase_order_form.html', context)

@login_required
def purchase_bill_list(request):
    """รายการบิลซื้อ"""
    bills = PurchaseBill.objects.filter(
        company=request.user.profile.company
    ).select_related('supplier').order_by('-bill_date')
    
    # Filter by status
    status = request.GET.get('status', '')
    if status:
        bills = bills.filter(status=status)
    
    # Filter overdue bills
    show_overdue = request.GET.get('overdue', '')
    if show_overdue:
        bills = bills.filter(
            due_date__lt=timezone.now().date(),
            status__in=['confirmed', 'partial_paid']
        )
    
    # Pagination
    paginator = Paginator(bills, 20)
    page = request.GET.get('page')
    bills = paginator.get_page(page)
    
    # Summary statistics
    total_outstanding = PurchaseBill.objects.filter(
        company=request.user.profile.company,
        status__in=['confirmed', 'partial_paid', 'overdue']
    ).aggregate(total=Sum('outstanding_amount'))['total'] or 0
    
    overdue_count = PurchaseBill.objects.filter(
        company=request.user.profile.company,
        due_date__lt=timezone.now().date(),
        status__in=['confirmed', 'partial_paid']
    ).count()
    
    context = {
        'bills': bills,
        'status': status,
        'show_overdue': show_overdue,
        'total_outstanding': total_outstanding,
        'overdue_count': overdue_count,
        'title': 'Purchase Bills - บิลซื้อ'
    }
    return render(request, 'purchasing/purchase_bill_list.html', context)

@login_required
def purchase_report(request):
    """รายงานการซื้อ"""
    company = request.user.profile.company
    
    # Date range filter
    date_from = request.GET.get('date_from', timezone.now().date().replace(day=1))
    date_to = request.GET.get('date_to', timezone.now().date())
    
    # Purchase summary
    bills = PurchaseBill.objects.filter(
        company=company,
        bill_date__range=[date_from, date_to],
        status__in=['confirmed', 'paid', 'partial_paid']
    )
    
    total_purchases = bills.aggregate(total=Sum('total_amount'))['total'] or 0
    total_bills = bills.count()
    average_bill_value = total_purchases / total_bills if total_bills > 0 else 0
    
    # Purchases by supplier
    supplier_purchases = bills.values(
        'supplier__name'
    ).annotate(
        total_amount=Sum('total_amount'),
        bill_count=Count('id')
    ).order_by('-total_amount')[:10]
    
    # Top purchased products
    bill_lines = PurchaseBillLine.objects.filter(
        bill__company=company,
        bill__bill_date__range=[date_from, date_to],
        bill__status__in=['confirmed', 'paid', 'partial_paid']
    )
    
    product_purchases = bill_lines.values(
        'product__name'
    ).annotate(
        total_quantity=Sum('quantity'),
        total_amount=Sum('line_total')
    ).order_by('-total_amount')[:10]
    
    # Supplier performance
    supplier_performance = Supplier.objects.filter(
        company=company,
        is_active=True
    ).annotate(
        avg_quality=Avg('quality_rating'),
        avg_delivery=Avg('delivery_rating'),
        avg_service=Avg('service_rating'),
        total_orders=Count('purchase_orders', filter=Q(purchase_orders__status='confirmed'))
    ).order_by('-avg_quality')[:10]
    
    context = {
        'date_from': date_from,
        'date_to': date_to,
        'total_purchases': total_purchases,
        'total_bills': total_bills,
        'average_bill_value': average_bill_value,
        'supplier_purchases': supplier_purchases,
        'product_purchases': product_purchases,
        'supplier_performance': supplier_performance,
        'title': 'Purchase Report - รายงานการซื้อ'
    }
    return render(request, 'purchasing/purchase_report.html', context)

# purchasing/forms.py
from django import forms
from .models import Supplier, PurchaseOrder, PurchaseBill, SupplierEvaluation

class SupplierForm(forms.ModelForm):
    class Meta:
        model = Supplier
        fields = [
            'code', 'name', 'supplier_type', 'email', 'phone', 'mobile',
            'tax_id', 'registration_number', 'credit_limit', 'payment_terms',
            'discount_percent', 'purchase_representative', 'is_approved'
        ]
        widgets = {
            'credit_limit': forms.NumberInput(attrs={'step': '0.01'}),
            'discount_percent': forms.NumberInput(attrs={'step': '0.01', 'max': '100'}),
            'payment_terms': forms.NumberInput(attrs={'min': '0'}),
        }

class PurchaseOrderForm(forms.ModelForm):
    class Meta:
        model = PurchaseOrder
        fields = [
            'supplier', 'order_date', 'expected_delivery_date', 'priority',
            'reference', 'supplier_reference', 'warehouse', 'delivery_address', 'notes'
        ]
        widgets = {
            'order_date': forms.DateInput(attrs={'type': 'date'}),
            'expected_delivery_date': forms.DateInput(attrs={'type': 'date'}),
            'delivery_address': forms.Textarea(attrs={'rows': 3}),
            'notes': forms.Textarea(attrs={'rows': 3}),
        }

class PurchaseBillForm(forms.ModelForm):
    class Meta:
        model = PurchaseBill
        fields = [
            'supplier', 'purchase_order', 'bill_date', 'due_date',
            'supplier_invoice_number', 'reference', 'payment_terms'
        ]
        widgets = {
            'bill_date': forms.DateInput(attrs={'type': 'date'}),
            'due_date': forms.DateInput(attrs={'type': 'date'}),
            'payment_terms': forms.Textarea(attrs={'rows': 2}),
        }